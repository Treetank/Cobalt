package org.laser.cobalt.database.tables;import java.sql.ResultSet;import java.sql.SQLException;import java.util.HashMap;import java.util.Map;import org.laser.cobalt.database.Table;import org.laser.cobalt.database.helpers.DBColumn;public class Userlist implements Table {	public class UserlistRow {		private int id;		private String device;		public UserlistRow(int id, String device) {			this.id = id;			this.device = device;		}		public UserlistRow(ResultSet set) {			try {				set.next();				this.id = set.getInt(Userlist.COLUMN_ID);				this.device = set.getString(Userlist.COLUMN_DEVICE);			} catch (SQLException e) {				this.id = 0;				this.device = "";				e.printStackTrace();			}		}		public int getId() {			return this.id;		}		public String getDevice() {			return this.device;		}	}	private static final String TABLE_NAME = "COBALT.USERLIST";	private static final int PRIMARY_KEY_INITIAL_VALUE = 1000;	private static final int PRIMARY_KEY_INCREMENT_VALUE = 1;	private static final String PRIMARY_KEY_CONSTRAINT_NAME = "USERLIST_PK";	private static final String COLUMN_ID = "id";	private static final String COLUMN_DEVICE = "device";	private DBColumn id, deviceId;	private Map<String, DBColumn> columns;	public Userlist() {		id = new DBColumn(COLUMN_ID, TYPE_INT);		deviceId = new DBColumn(COLUMN_DEVICE, TYPE_TEXT);		columns = new HashMap<>();		columns.put(COLUMN_ID, id);		columns.put(COLUMN_DEVICE, deviceId);	}	@Override	public String getTableName() {		return TABLE_NAME;	}	@Override	public String dropTable() {		return SQL_COMMAND_DELETE + TABLE_NAME;	}	@Override	public String makeTable() {		return SQL_COMMAND_CREATE + TABLE_NAME + CHAR_OPEN_BRACKET + id.getName() + id.getType() + TYPE_NOT_NULL + SQL_SYNTAX_GENERATED + SQL_SYNTAX_ALWAYS				+ SQL_SYNTAX_AS + SQL_SYNTAX_IDENTITY + CHAR_OPEN_BRACKET + SQL_SYNTAX_START + PRIMARY_KEY_INITIAL_VALUE + CHAR_COMMA + SQL_SYNTAX_INCREMENT				+ PRIMARY_KEY_INCREMENT_VALUE + CHAR_CLOSE_BRACKET + CHAR_COMMA + deviceId.getName() + deviceId.getType() + TYPE_NOT_NULL + SQL_SYNTAX_UNIQUE				+ CHAR_COMMA + SQL_SYNTAX_CONSTRAINT + PRIMARY_KEY_CONSTRAINT_NAME + TYPE_KEY + CHAR_OPEN_BRACKET + id.getName() + CHAR_CLOSE_BRACKET				+ CHAR_CLOSE_BRACKET;	}	@Override	public Map<String, DBColumn> getColumns() {		return columns;	}	public String addUser(String deviceId) {		return SQL_COMMAND_INSERT + TABLE_NAME + CHAR_OPEN_BRACKET + this.deviceId.getName() + CHAR_CLOSE_BRACKET + SQL_SYNTAX_VALUES + CHAR_OPEN_BRACKET				+ CHAR_SINGLE_QUOTE + deviceId + CHAR_SINGLE_QUOTE + CHAR_CLOSE_BRACKET;	}	public String findUser(String deviceId) {		return SQL_COMMAND_SELECT + SQL_SYNTAX_ALL + SQL_SYNTAX_FROM + TABLE_NAME + SQL_SYNTAX_WHERE + COLUMN_DEVICE + SQL_SYNTAX_EQUALS + CHAR_SINGLE_QUOTE				+ deviceId + CHAR_SINGLE_QUOTE;	}}